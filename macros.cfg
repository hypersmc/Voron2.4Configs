#####################################################################
#   Macros
#####################################################################
[gcode_macro _KNOMI_STATUS]
variable_homing: False
variable_probing: False
variable_qgling: False
variable_heating_nozzle: False
variable_heating_bed: False
gcode:

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    ##  Uncomment for for your size printer:
    #--------------------------------------------------------------------
    ##  Uncomment for 250mm build
    #G0 X125 Y125 Z30 F3600
    
    ##  Uncomment for 300 build
    G0 X150 Y150 Z30 F3600
    
    ##  Uncomment for 350mm build
    #G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------
    RESTORE_GCODE_STATE NAME=STATE_G32


#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
[gcode_macro PRINT_START]
gcode:
    G32                            ; home all axes
    G90                            ; absolute positioning
    G1 Z20 F3000                   ; move nozzle away from bed
    status_leveling
    SETUP_KAMP_MESHING
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    
    status_printing
    
   
[gcode_macro PRINT_START_NEW]
gcode:
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  SET_PIN PIN=chamberlights VALUE=1.00
  SET_FAN_SPEED FAN=Nevermore SPEED=1
  status_heating
  M140 S{target_bed}
  M190 S{target_bed}
  G32
  G90
  G1 Z20 F30000
  status_leveling
  SETUP_KAMP_MESHING
  BED_MESH_CLEAR
  BED_MESH_CALIBRATE
  status_heating
  M104 S{target_extruder}
  M109 S{target_extruder}
  G90 E0
  G90 E0
  status_printing
  #Smart_Park
  VORON_PURGE
  #LINE_PURGE

[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    #{% set unload = params.UNLOAD_AT_END|default(0)|int %}
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    #{% if unload|int == 1%}
    #  ERCF_EJECT
    #{% endif %}
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    SET_PIN PIN=chamberlights VALUE=0
    SET_FAN_SPEED FAN=Nevermore SPEED=0
    status_ready



# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        # G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        # G28 X Y
        # G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            
            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            
            # Small box
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        G28
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED


[gcode_macro CLEAN_NOZZLE]
description: Wipe the nozzle on the brush
gcode:
    {% set purge_and_brush_enabled = printer["gcode_macro _USER_VARIABLES_OTHER"].purge_and_brush_enabled %}
    
    {% if purge_and_brush_enabled %}
        {% set St = printer["gcode_macro _USER_VARIABLES_OTHER"].travel_speed * 60 %}
        {% set Sz = printer["gcode_macro _USER_VARIABLES_OTHER"].z_drop_speed * 60 %}
        {% set Sc = printer["gcode_macro _USER_VARIABLES_OTHER"].brush_clean_speed * 60 %}

        {% set Px, Py, Pz = printer["gcode_macro _USER_VARIABLES_OTHER"].purge_bucket_xyz|map('float') %}
        {% set Bx, By, Bz = printer["gcode_macro _USER_VARIABLES_OTHER"].brush_xyz|map('float') %}


        # Move to purge zone (left side)
        G90
        G1 X{Px} Y{Py} Z{Bz} F{St}
        # Move to center of the brush
        G1 X{Bx} Y{By} Z{Bz} F{St}

        # Wipe procedure
        G91
        {% for wipe in range(6) %}
            G1 Y-5 F{Sc}
            G1 Y+5 F{Sc}
        {% endfor %}

        G1 X+20 F{Sc}
        {% for wipe in range(6) %}
            G1 X-40 F{Sc}
            G1 X+40 F{Sc}
        {% endfor %}

        G1 Z{Bz|int + 10} F{Sz}

        G90
    {% endif %}


[gcode_macro PURGE]
description: Purge a specific amount of filament ontop of the purge bucket
gcode:
    {% set purge_and_brush_enabled = printer["gcode_macro _USER_VARIABLES_OTHER"].purge_and_brush_enabled %}
    
    {% set DISTANCE = params.DISTANCE|default(10)|float %}
    {% set TEMP = params.TEMP|default(printer["gcode_macro _USER_VARIABLES_OTHER"].print_default_extruder_temp)|float %}
    {% set Z_DROP = params.Z_DROP|default(1)|int %}

    {% set St = printer["gcode_macro _USER_VARIABLES_OTHER"].travel_speed * 60 %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES_OTHER"].z_drop_speed * 60 %}

    G90

    MOVE_TO_PURGE_BUCKET Z_DROP={Z_DROP}

    # Heat if needed and purge
    _LOW_TEMP_CHECK T={TEMP}
  
    G92 E0
    G1 E{DISTANCE|float} F150
  
    # Retract
    G92 E0
    G1 E-1.7 F2100
    G1 E-18.3 F150

    # Wait 20s to let the nozzle ooze before cleaning
    G91
    G1 Z5 F{Sz}
    G90
    G4 P{20 * 1000}
  
    G92 E0


[gcode_macro MOVE_TO_PURGE_BUCKET]
description: Move over the purge bucket
gcode:
    {% set purge_and_brush_enabled = printer["gcode_macro _USER_VARIABLES_OTHER"].purge_and_brush_enabled %}
    {% set Z_DROP = params.Z_DROP|default(1)|int %}
    
    # Move to purge zone only if it's available, else just purge where the toolhead is
    {% if purge_and_brush_enabled %}
        SAVE_GCODE_STATE NAME=MOVE_TO_PURGE_BUCKET
        G90
        {% set St = printer["gcode_macro _USER_VARIABLES_OTHER"].travel_speed * 60 %}

        {% set Px, Py, Pz = printer["gcode_macro _USER_VARIABLES_OTHER"].purge_bucket_xyz|map('float') %}
        {% if Z_DROP == 1 %}
            G1 X{Px} Y{Py} Z{Pz} F{St}
        {% else %}
            G1 X{Px} Y{Py} F{St}
        {% endif %}
        RESTORE_GCODE_STATE NAME=MOVE_TO_PURGE_BUCKET
    {% endif %}



[gcode_macro PARK]
description: Park the toolhead at the back and retract some filament if the nozzle is hot
gcode:
    {% set E = params.E|default(1.7)|float %}

    {% set Px, Py = printer["gcode_macro _USER_VARIABLES_OTHER"].park_position_xy|map('float') %}
    {% set park_lift_z = printer["gcode_macro _USER_VARIABLES_OTHER"].park_lift_z %}

    {% set St = printer["gcode_macro _USER_VARIABLES_OTHER"].travel_speed * 60 %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES_OTHER"].z_drop_speed * 60 %}

    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}

    {% set z_safe = act_z + park_lift_z %}
    {% if z_safe > max_z %}
        {% set z_safe = max_z %}
    {% endif %}

    # retract filament before move up toolhead
    {% if printer.extruder.temperature > 185 %}
      G10
    {% endif %}
    G90
    G1 Z{z_safe} F{Sz}

    G0 X{Px} Y{Py} F{St}



[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: QUAD_GANTRY_LEVEL_BASE
gcode:
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=qgling VALUE=True
  status_calibrating_z
  QUAD_GANTRY_LEVEL_BASE
  status_ready
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=qgling VALUE=False

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
gcode: 
  SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probing VALUE=True
  status_meshing
  BED_MESH_CALIBRATE_BASE
  status_ready
  SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probing VALUE=False
[gcode_macro G28]
rename_existing: G28.1
gcode:
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=True
  G28.1 {rawparams}
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=False

[gcode_macro M109]
rename_existing: M109.1
gcode:
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=heating_nozzle VALUE=True
  M109.1 {rawparams}
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=heating_nozzle VALUE=False

[gcode_macro SDCARD_RESET_FILE]
rename_existing: SDCARD_RESET_FILE_BASE
gcode:
  status_ready
  SDCARD_RESET_FILE_BASE

[gcode_macro M205]
gcode:




[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

######################################################################
# Multi Material Macros
######################################################################
[gcode_macro M900]
gcode:
    {% set SET_PRESSURE_ADVANCE = params.K|default(0)|int %}

[gcode_macro T0]
gcode:
    _FAKE_TOOLCHANGE TOOL=0

[gcode_macro T1]
gcode:
    _FAKE_TOOLCHANGE TOOL=1

[gcode_macro T2]
gcode:
    _FAKE_TOOLCHANGE TOOL=2

[gcode_macro T3]
gcode:
    _FAKE_TOOLCHANGE TOOL=3

[gcode_macro T4]
gcode:
    _FAKE_TOOLCHANGE TOOL=4

[gcode_macro T5]
gcode:
    _FAKE_TOOLCHANGE TOOL=5

#TODO fail on invalid tool numbers
[gcode_macro _FAKE_TOOLCHANGE]
description: _FAKE_TOOLCHANGE TOOL={n} where n is the tool number. Start from 0. if
    FAKE is set to nonzero, it does call the filament change code.
variable_current_tool: 0
variable_maxtool: 5
gcode:
    {% set newtool = params.TOOL|default(-1)|int %}
    {% set isfake = params.FAKE|default(-1)|int %}
    
    {% if newtool < 0  %}
        _MESSAGE TEXT={"\"Tool " + current_tool|string + " in use\"" }
     {% elif newtool > maxtool  %}
        _MESSAGE TEXT={"\"Tool " + newtool|string + " not valid\"" }
    {% elif newtool == current_tool|int %}
        _MESSAGE TEXT={"\"Tool " + current_tool|string + " already selected\"" }
    {% else %}
        _MESSAGE TEXT={"\"Change to tool " + newtool|string + "\"" }
        {% if ( isfake <= 0 ) %}
            M600
            SET_GCODE_VARIABLE MACRO=_FAKE_TOOLCHANGE VARIABLE=current_tool VALUE={newtool}
        {% else %}
            _MESSAGE TEXT="M600 Faked"
            SET_GCODE_VARIABLE MACRO=_FAKE_TOOLCHANGE VARIABLE=current_tool VALUE={newtool}
        {% endif %}
    {% endif %}
    # ACTIVATE_EXTRUDER EXTRUDER=extruder #this doesn't help



[gcode_macro _MESSAGE]
#description: Usage - _MESSAGE TEXT="hello world"
gcode:
    M117 {params.TEXT|string|default("message empty")}
    { action_respond_info( params.TEXT|string|default("message empty") )}

[gcode_macro M600]
gcode:
   {% set X = 50 %}
   {% set Y = 0 %}
   {% set Z = 10 %}
   SAVE_GCODE_STATE NAME=M600_state
   PAUSE
   G91
   G1 E-.8 F2700
   G1 Z{Z}
   G90
   G1 X{X} Y{Y} F3000
   G91
   G1 E-50 F1000
   RESTORE_GCODE_STATE NAME=M600_state






[gcode_macro START_DRYER]
variable_time: 7200
variable_temprature: 70.0
variable_chamber: 25.0
gcode:
    ; turn the heaters on, however you do that.
    M140 S{temprature} ; Sets the print bed temperature without waiting.
    #M141 S{CHAMBER}     ; [OPTIONAL] Sets the enclosure temperature.
    ; then finally,
    SET_GCODE_VARIABLE MACRO=DRYER_STATUS VARIABLE=time_remaining VALUE={time}
    SET_GCODE_VARIABLE MACRO=DRYER_STATUS VARIABLE=bed_temperature VALUE={temprature}
    #SET_GCODE_VARIABLE MACRO=DRYER_STATUS VARIABLE=chamber_temperature VALUE={CHAMBER}
    UPDATE_DELAYED_GCODE ID=DRYER_TIMER DURATION=1
    SET_IDLE_TIMEOUT 

[gcode_macro STOP_DRYER]
gcode:
    ; Turn off heaters etc. here
    M140 S0 ; Disable bed heater
    #M141 S0 ; [OPTIONAL] Disable enclosure heater/fan
    SET_GCODE_VARIABLE MACRO=DRYER_STATUS VARIABLE=time_remaining VALUE=0
    UPDATE_DELAYED_GCODE ID=DRYER_TIMER DURATION=0    ; Stop the timer.
    M117 Drying Stopped

[gcode_macro DRYER_STATUS]
variable_time_remaining: 0
variable_bed_temperature: 0
variable_chamber_temperature: 0
gcode:
    {% if time_remaining > 0 %}
        M140 S{bed_temperature} ; Reset bed temperature (prevents timeout)
        #M141 S{chamber_temperature} ; [OPTIONAL] reset chamber temperature
        SET_GCODE_VARIABLE MACRO=DRYER_STATUS VARIABLE=time_remaining VALUE={time_remaining - 1}
        M117 Drying {time_remaining}
    {% else %}
        STOP_DRYER
    {% endif %}

[delayed_gcode DRYER_TIMER]
gcode:
    UPDATE_DELAYED_GCODE ID=DRYER_TIMER DURATION=1
    DRYER_STATUS

[gcode_macro DRY_PLA]
gcode:
    START_DRYER TEMPERATURE=50 CHAMBER=25 TIME=14400

[gcode_macro DRY_PETG]
gcode:
    START_DRYER TEMPERATURE=55  CHAMBER=30 TIME=18000

[gcode_macro DRY_ABS]
gcode:
    START_DRYER TEMPERATURE=65 CHAMBER=40 TIME=14400



################################################
###### STANDARD INPUT_SHAPER CALIBRATIONS ######
################################################
# Written by Frix_x#0161 #
# @version: 1.3

# CHANGELOG:
#   v1.3: added possibility to override the default parameters
#   v1.2: added EXCITATE_AXIS_AT_FREQ to hold a specific excitating frequency on an axis and diagnose mechanical problems
#   v1.1: added M400 to validate that the files are correctly saved to disk
#   v1.0: first version of the automatic input shaper workflow

# -------------------------------------------------------------------------------------------------------------------------
# If you want to use it into your own config, please install it as a standalone macro as described in the
# installation section of this file: docs > features > is_workflow.md
# -------------------------------------------------------------------------------------------------------------------------

### What is it ? ###
# This macro helps you to configure the input shaper algorithm of Klipper by running the tests sequencially and calling an automatic script
# that generate the graphs, manage the files and so on. It's basically a fully automatic input shaper calibration workflow.
# Results can be found in your config folder using FLuidd/Maisail file manager.

# The goal is to make it easy to set, share and use it.

# Usage:
#   1. Call the AXES_SHAPER_CALIBRATION macro, wait for it to end and compute the graphs. Then look for the results in the results folder.
#   2. Call the BELTS_SHAPER_CALIBRATION macro, wait for it to end and compute the graphs. Then look for the results in the results folder.
#   3. If you find out some strange noise, you can use the EXCITATE_AXIS_AT_FREQ macro to diagnose the origin


[gcode_macro AXES_SHAPER_CALIBRATION]
description: Run standard input shaper test for all axes
gcode:
    {% set verbose = params.VERBOSE|default(true) %}
    {% set min_freq = params.FREQ_START|default(5)|float %}
    {% set max_freq = params.FREQ_END|default(133.3)|float %}
    {% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}

    TEST_RESONANCES AXIS=X FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}
    M400
    TEST_RESONANCES AXIS=Y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}
    M400

    {% if verbose %}
        RESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."
    {% endif %}
    RUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER


[gcode_macro BELTS_SHAPER_CALIBRATION]
description: Run custom demi-axe test to analyze belts on CoreXY printers
gcode:
    {% set verbose = params.VERBOSE|default(true) %}
    {% set min_freq = params.FREQ_START|default(5)|float %}
    {% set max_freq = params.FREQ_END|default(133.33)|float %}
    {% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}

    TEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}
    M400
    TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}
    M400

    {% if verbose %}
        RESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."
    {% endif %}
    RUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS


[gcode_macro EXCITATE_AXIS_AT_FREQ]
description: Maintain a specified input shaper excitating frequency for some time to diagnose vibrations
gcode:
    {% set FREQUENCY = params.FREQUENCY|default(25)|int %}
    {% set TIME = params.TIME|default(10)|int %}
    {% set AXIS = params.AXIS|default("x")|string|lower %}

    TEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}
    M400








[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}



##########################
# LED Effects Animations #
##########################

##################
## logo effects ##
##################

[led_effect sb_logo_busy]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (1)
layers:
    breathing  3 1 top (1,0,0)

[led_effect sb_logo_cleaning]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (1)
layers:
    breathing  3 1 top (0.0, 0.02, 0.5)

[led_effect sb_logo_calibrating_z]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (1)
layers:
        breathing  3 1 top (0.0, 0.0, 0.35)

[led_effect sb_logo_heating]
leds:
    neopixel:sb_leds (1)
autostart:                          false
frame_rate:                         24
layers:
     breathing  3 1 top (1, 0.18, 0)

[led_effect sb_logo_cooling]
leds:
    neopixel:sb_leds (1)
autostart:                          false
frame_rate:                         24
layers:
     breathing  3 1 top (0, 0, 1)

[led_effect sb_logo_homing]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (1)
layers:
        breathing  3 1 top (0.0, 0.6, 0.2)

[led_effect sb_logo_leveling]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (1)
layers:
        breathing  3 1 top (0.5, 0.1, 0.4)

[led_effect sb_logo_meshing]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (1)
layers:
        breathing  3 1 top (0.2, 1.0, 0.0)

[led_effect sb_logo_printing]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (1)
layers:
    gradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)

[led_effect sb_logo_standby]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (1)
layers:
        breathing  3 1 top (0.01, 0.01, 0.01)

[led_effect sb_logo_part_ready]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (1)
layers:
        breathing  3 1 top (0.0, 1.0, 0.0)

####################
## nozzle effects ##
####################

[led_effect sb_nozzle_heating]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (2,3)
layers:
        breathing  3 1 top (1.0, 0.18, 0.0, 0.0)

[led_effect sb_nozzle_cooling]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (2,3)
layers:
        breathing  3 1 top (0.0, 0.0, 1.0, 0.1)

[led_effect sb_nozzle_standby]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (2,3)
layers:
        breathing  3 1 top (0.6, 0.0, 0.0, 0.0)

[led_effect sb_nozzle_part_ready]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (2,3)
layers:
        breathing  3 1 top (0.6, 1.0, 0.0, 0.1)


#####################
## all led effects ##
#####################

[led_effect sb_critical_error]
leds:
    neopixel:sb_leds
layers:
    strobe         1  1.5   add        (1.0,  1.0, 1.0)
    breathing      2  0     difference (0.95, 0.0, 0.0)
    static         1  0     top        (1.0,  0.0, 0.0)
autostart:                             false
frame_rate:                            24
run_on_error:                          true


[led_effect rainbow]
leds:
    neopixel:sb_leds
autostart:                          true
frame_rate:                         24
layers:
    gradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)




#######################
# LED Effects Statics #
#######################

[led_effect set_nozzle_leds]
leds:
    neopixel:sb_leds (2,3)
   #neopixel:caselight
autostart:                          false
frame_rate:                         24
layers:
    static         0  0     top        (0.0,  0.0, 0.0, 1.0)

[led_effect set_logo_leds]
leds:
    neopixel:sb_leds (1)
autostart:                          false
frame_rate:                         24
layers:
    static         0  0     top        (1.0,  1.0, 1.0)

##############
# The Macros #
##############

[gcode_macro set_logo_leds_off]
gcode:
    SET_LED_EFFECT EFFECT=set_logo_leds STOP=1

[gcode_macro set_logo_leds_on]
gcode:
    SET_LED_EFFECT EFFECT=set_logo_leds

[gcode_macro set_nozzle_leds_on]
gcode:
    SET_LED_EFFECT EFFECT=set_nozzle_leds

[gcode_macro set_nozzle_leds_off]
gcode:
    SET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1

[gcode_macro status_off]
gcode:
    STOP_LED_EFFECTS

[gcode_macro status_ready]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=rainbow

[gcode_macro status_part_ready]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=sb_nozzle_part_ready
    SET_LED_EFFECT EFFECT=sb_logo_part_ready

[gcode_macro status_busy]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=sb_logo_busy
    set_nozzle_leds_on

[gcode_macro status_heating]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=sb_logo_heating
    SET_LED_EFFECT EFFECT=sb_nozzle_heating

[gcode_macro status_cooling]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=sb_logo_cooling
    SET_LED_EFFECT EFFECT=sb_nozzle_cooling


[gcode_macro status_leveling]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=sb_logo_leveling
    set_nozzle_leds_on

[gcode_macro status_homing]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=sb_logo_homing
    set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=sb_logo_cleaning
    set_nozzle_leds_on

[gcode_macro status_meshing]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=sb_logo_meshing
    set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=sb_logo_calibrating_z
    set_nozzle_leds_on

[gcode_macro status_printing]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=sb_logo_printing
    set_nozzle_leds_on

